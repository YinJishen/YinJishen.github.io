<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jishen Yin</title>
    <link>https://yinjishen.github.io/post/</link>
    <description>Recent content in Posts on Jishen Yin</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 15 Nov 2020 19:15:13 -0500</lastBuildDate>
    
	<atom:link href="https://yinjishen.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>COVID-19 Team Project</title>
      <link>https://yinjishen.github.io/post/fp823/</link>
      <pubDate>Sun, 15 Nov 2020 19:15:13 -0500</pubDate>
      
      <guid>https://yinjishen.github.io/post/fp823/</guid>
      <description>This is the final project of BIOSTAT823: Statistical Programming for Big Data in 2020 Fall Semester at Duke. Our team name is &amp;ldquo;Durham Sloths&amp;rdquo;. This project is finished by Zhuoran Hou(https://github.com/ZhuoranHou), Qianyin Lu (https://github.com/QianyinLu), Jishen Yin (https://github.com/YinJishen) and Zewen Zhang (https://github.com/zewenzhang1007).
Project GitHub Page: https://github.com/YinJishen/BIOSTAT823-Final-Project
In this project, we mainly work on the analysis on different aspects of COVID-19 data. In part 1, we recreated the overview of COVID-19 in U.</description>
    </item>
    
    <item>
      <title>Deep learning model fitting for insect classification</title>
      <link>https://yinjishen.github.io/post/deeplearning/</link>
      <pubDate>Thu, 05 Nov 2020 16:57:40 -0500</pubDate>
      
      <guid>https://yinjishen.github.io/post/deeplearning/</guid>
      <description>GitHub Page: https://github.com/YinJishen/Biostat823-Homework/tree/master/hw7
Data Source: https://www.insectimages.org/index.cfm
LeNet Model In this homework, I used the simplest CNN model &amp;mdash;&amp;mdash; LeNet[1] to train the data with pytorch(version: 1.5.1+cpu+windows). The structure of the network is shown below
Result Training and test accuracy is shown below
Reference [1] LeCun, Y., Bottou, L., Bengio, Y., &amp;amp; Haffner, P. (1998). Gradient-based learning applied to document recognition. Proceedings of the IEEE, 86(11), 2278-2324.</description>
    </item>
    
    <item>
      <title>Dashboard for Data of PhDs Awarded in the US</title>
      <link>https://yinjishen.github.io/post/dashboard/</link>
      <pubDate>Wed, 04 Nov 2020 20:07:49 -0500</pubDate>
      
      <guid>https://yinjishen.github.io/post/dashboard/</guid>
      <description>Data Source: https://ncses.nsf.gov/pubs/nsf19301/data
GitHub Page: https://github.com/YinJishen/Biostat823-Homework/tree/master/hw6
Dashboard Url: https://demo-case.herokuapp.com/
In this homework, I used two table: table 4 and table 6. The preprocess steps are in preprocess.ipynb file. I mainly used melt and concat function in pandas to change the data from the wide format into long format. For data in table 6, there are some &amp;ldquo;D&amp;rdquo; numbers that indicate confidential data, I cleared this data before doing the visualization part in case that the error message arises.</description>
    </item>
    
    <item>
      <title>Oldest Character in Star Wars Series</title>
      <link>https://yinjishen.github.io/post/star_war/</link>
      <pubDate>Fri, 23 Oct 2020 15:31:49 -0400</pubDate>
      
      <guid>https://yinjishen.github.io/post/star_war/</guid>
      <description>Source Code: https://github.com/YinJishen/Biostat823-Homework/tree/master/hw5
API documentation: https://swapi.dev/documentation
Download the data This problem requires us to find all people and all films using the API. Since the url is formatted such as &amp;ldquo;https://swapi.dev/api/people/32&amp;quot; or &amp;ldquo;https://swapi.dev/api/films/3&amp;quot;.
So in order to get all people and films, I looped from 1 to 100 for &amp;ldquo;people&amp;rdquo; and 1 to 10 for &amp;ldquo;film&amp;rdquo;. If the url does not work, it will return {&amp;ldquo;details&amp;rdquo;: None}. So I can filter this result by checking if &amp;ldquo;details&amp;rdquo; is in the json file.</description>
    </item>
    
    <item>
      <title>Third Normal Form of Spotify Song Dataset</title>
      <link>https://yinjishen.github.io/post/3nf/</link>
      <pubDate>Thu, 08 Oct 2020 14:46:55 -0400</pubDate>
      
      <guid>https://yinjishen.github.io/post/3nf/</guid>
      <description>Data source: https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-01-21/readme.md
Source Code: https://github.com/YinJishen/Biostat823-Homework/tree/master/hw4
1NF To get the first normal form. I firstly checked the uniqueness of rows and columns. There is no duplicate for both dimensions. And all cells only contain one elements. So I simply make some data cleaning work. For duration_ms, I translated it into duration_min by dividing 60,000. And for track_name and track_album_name, I noticed that there are a lot of &amp;ldquo;remix&amp;rdquo; and &amp;ldquo;feat&amp;rdquo; words in the name, which I believe is unnecessary.</description>
    </item>
    
    <item>
      <title>Visualization</title>
      <link>https://yinjishen.github.io/post/visualization/</link>
      <pubDate>Tue, 22 Sep 2020 16:31:21 -0400</pubDate>
      
      <guid>https://yinjishen.github.io/post/visualization/</guid>
      <description>The detailed code is on GitHub. https://github.com/YinJishen/Biostat823-Homework/tree/master/hw3
In the first graph, I chose the top 5 countries which have the largest average death rate in the past 20 years. (Sierra Leone, Burkina Faso, Uganda, Equatorial Guinea and Cote d&amp;rsquo;lvoire)
From this graph, we can see that there are two different trends. For Uganda (Green line), the death rate keeps decreasing. And for the other four countries, the death rate increases in the first 10 years and then decreases.</description>
    </item>
    
    <item>
      <title>Euler Project</title>
      <link>https://yinjishen.github.io/post/euler-project/</link>
      <pubDate>Tue, 01 Sep 2020 18:58:20 -0400</pubDate>
      
      <guid>https://yinjishen.github.io/post/euler-project/</guid>
      <description>All detailed solutions and codes are stored in https://github.com/YinJishen/Biostat823-Homework/tree/master/hw2
Problem 8 (Accepted: 351189) https://projecteuler.net/problem=8
The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
73167176531330624919225119674426574742355349194934 96983520312774506326239578318016984801869478851843 85861560789112949495459501737958331952853208805511 12540698747158523863050715693290963295227443043557 66896648950445244523161731856403098711121722383113 62229893423380308135336276614282806444486645238749 30358907296290491560440772390713810515859307960866 70172427121883998797908792274921901699720888093776 65727333001053367881220235421809751254540594752243 52584907711670556013604839586446706324415722155397 53697817977846174064955149290862569321978468622482 83972241375657056057490261407972968652414535100474 82166370484403199890008895243450658541227588666881 16427171479924442928230863465674813919123162824586 17866458359124566529476545682848912883142607690042 24219022671055626321111109370544217506941658960408 07198403850962455444362981230987879927244284909188 84580156166097919133875499200524063689912560717606 05886116467109405077541002256983155200055935729725 71636269561882670428252483600823257530420752963450 Find the thirteen adjacent digits in the 1000-digit number that have the greatest product.</description>
    </item>
    
    <item>
      <title>Building a GitHub Page with theme using Hugo (Windows)</title>
      <link>https://yinjishen.github.io/post/github-pages/</link>
      <pubDate>Wed, 26 Aug 2020 20:09:25 -0400</pubDate>
      
      <guid>https://yinjishen.github.io/post/github-pages/</guid>
      <description>This is my first personal blog built with Hugo, and it took me a really long time to read the official guideline and work through every single details.
Preparation Since my computer&amp;rsquo;s system is Windows 10, which makes it less convenient to finish this job, I need to do the following preparations before all steps.
  Install Chocolatey to install Hugo
  Install Hugo with Chocolatey
  Install Typora (Markdown editor)</description>
    </item>
    
  </channel>
</rss>